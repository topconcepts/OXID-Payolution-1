<?php
/**
 * Copyright 2015 Payolution GmbH
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0 [^]
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
namespace Payolution;

use OxidEsales\Eshop\Core\Registry;
use OxidEsales\Eshop\Core\UtilsServer;
use TopConcepts\Payolution\Exception\PayolutionException;
use TopConcepts\Payolution\Manager\OrderManager;
use TopConcepts\Payolution\Order\OrderContext;
use TopConcepts\Payolution\Order\PayolutionOrder;
use TopConcepts\Payolution\Payment\PaymentMethod;

/**
 * Class Payolution_Events describes all events which occurs in frontend side.
 * (issued by customer/company)
 *
 * Class Events
 * @package Payolution
 */
class PayolutionEvents
{
    /**
     * @var PayolutionServices
     */
    private $services;

    /**
     * @var OrderManager
     */
    private $orderingManager;

    /**
     * @param PayolutionServices $services
     */
    public function __construct(PayolutionServices $services)
    {
        $this->services = $services;
        $this->orderingManager = $services->orderingManager();
    }

    /**
     * Event is triggered after Payment Method Selection Page
     *
     * Here is done all validation of selected payment method uses PC
     * (Precheck) Payolution API Also we need locally verify that order has 18
     * years old.
     *
     *
     * Technical details:
     *
     * This events is triggered in controller: 'payment' action:
     * 'validatepayment'
     *
     *                                        (extended by module)
     * Flow: Payment::validatePayment  -> oxPayment::isValidPayment() ->
     * onPreConfirmation(..)
     *
     *
     * Note: this event is also triggered by controller: 'order'
     *
     *                                                      (extended by
     *                                                      module)
     * Flow: Order::render() -> Order::getPayment() ->
     * oxPayment::isValidPayment()
     *
     *
     * So make sure that we ignore second call or return only cached one per
     * OrderingContext
     *
     * @param OrderContext $context
     * @throws PayolutionException
     */
    public function onPreConfirmation(OrderContext $context)
    {
        // *) remember all form values which was entered during payment method selection.
        $this->services->forms()->cachePaymentForm($context->paymentOptionsForm());
        $this->orderingManager->precheckByContext($context);
    }

    /**
     * Event is triggered then order is completely confirmed with a 'Buy now'
     * button in Order Confirmation Page.
     *
     * Here we must complete a payolution order and inform Payolution service
     * about order. uses PA (PreAuth) (creation of order) API call.
     *
     * Flow: oxOrder->finalizeOrder() -> oxOrder::_executePayment() -->
     * oxPaymentGateway::executePayment()
     *       -> onPostConfirmation()
     * @param PayolutionOrder $order
     * @throws PayolutionException
     */
    public function onPostConfirmation(PayolutionOrder $order)
    {
        $order->setIpAddress(Registry::get(UtilsServer::class)->getRemoteAddress());
        $this->orderingManager->precheck($order);
        $this->orderingManager->confirm($order);

        $order->setAsNotDeletable();
    }

    /**
     * Event is triggered then order is confirmed by Payolution and order ID
     * was generated by oxid.
     *
     * Flow: oxOrder->finalizeOrder() --> _updateOrderDate() ->
     * onConfirmedOrderHasBeenCreated()
     *
     * Warning: If this method throws an exception then Oxid user will see a
     * blank page then "Confirm Order" will be clicked. So you must handle all
     * exceptions inside this method and do not allow to throw any exceptions.
     *
     * @param PayolutionOrder $order
     */
    public function onConfirmedOrderHasBeenCreated(PayolutionOrder $order)
    {
        // *) we need to update order information in Payolution. (update OrderID)
        $this->orderingManager->update($order);
        if ($order->paymentMethod() == PaymentMethod::Installment()) {
            $this->orderingManager->shipped($order);
        }
    }

    /**
     * @param PayolutionOrder $order
     */
    public function onOrderUpdate(PayolutionOrder $order) {
        if (!$order->isShipped()) {
            $this->orderingManager->update($order, true);
        }
    }
}
